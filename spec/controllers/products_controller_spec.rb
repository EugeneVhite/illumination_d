require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProductsController, type: :controller do

  describe 'GET index' do
    it 'populates array of products' do
      first_product = create(:product)
      second_product = create(:product)
      array_of_created_products = Array.new

      array_of_created_products << first_product
      array_of_created_products << second_product

      get :index

      assigns(:products).should eq(array_of_created_products)
    end


    it 'should filter products' do
      first_product = create(:product)
      second_product = create(:product)

      manufacturer = create(:manufacturer)
      type = create(:type)

      first_product.manufacturer = manufacturer
      first_product.save
      second_product.type = type
      second_product.save

      get :index, { product: {type: type} }

      assigns(:products).should eq([second_product])
    end

    it 'renders :index template' do
      get 'index'
      response.should render_template :index
    end
  end

  describe 'GET show' do
    it 'assigns requested product to @product' do
      product = create(:product)

      get :show, id: product
      assigns(:product).should eq(product)
    end
  end


  # in fact, it tests functionality of all controllers
  # with NavigationSideBar concern (with 'include NavigationSideBar' string)
  describe 'navigation bar' do
    it 'populates array of types' do
      product = create(:product)
      type = create(:type)

      product.type = type
      product.save

      get :index
      assigns(:types).should eq([type])
    end

    it 'populates array of manufacturers' do
      product = create(:product)
      manufacturer = create(:manufacturer)

      product.manufacturer = manufacturer
      product.save

      get :index
      assigns(:manufacturers).should eq([manufacturer])
    end
  end


end
